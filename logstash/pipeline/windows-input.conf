input {
  http {
    port => 8080
    codec => "json"
  }
}

filter {
  # Remove unused logstash fields
  mutate {
    remove_field => [
      "headers"
    ]
  }

  # Remove unused Windows event log fields
  mutate {
    remove_field => [
      "ContainerLog",
      "Keywords",
      "Level",
      "MatchedQueryIds",
      "Opcode",
      "ProviderId",
      "Qualifiers",
      "Task",
      "ThreadId"
    ]
  }

  # Standardize field names
  mutate {
    rename => {
      "ActivityId" => "activity_id"
      "Id" => "event_id"
      "KeywordsDisplayNames" => "keywords"
      "LevelDisplayName" => "level_name"
      "LogName" => "log_name"
      "MachineName" => "hostname"
      "Message" => "event_body"
      "OpcodeDisplayName" => "opcode_name"
      "ProcessId" => "process_id"
      "Properties" => "event_properties"
      "ProviderName" => "provider_name"
      "RecordId" => "record_id"
      "RelatedActivityId" => "activity_id"
      "TaskDisplayName" => "task_name"
      "TimeCreated" => "event_time"
      "UserId" => "event_user"
      "Version" => "event_version"
    }
  }

  # Ensure fields are correct type otherwise conditionals fail
  mutate {
    convert => {
      "event_id" => "string"
    }
  }

  # Coerce event_time to date
  mutate {
    gsub => [
      "event_time", "/Date\(", "",
      "event_time", "\)/", ""
    ]
  }

  date {
    match => ["event_time", "UNIX_MS"]
    remove_field => ["event_time"]
  }

  # TODO: use a translate instead (provider_name => service.type)
  if [provider_name] == "RemoteAccess" {
    mutate {
      add_field => {
        "[service][type]" => "vpn"
      }
    }
  }
}

output {
  # Distribute events based on service name
  if [service][type] == "vpn" {
    pipeline { send_to => "windows-vpn" }
  }

  else {
    pipeline { send_to => "default-output" }
  }
}
