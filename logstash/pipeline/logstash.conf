input {
	http {
		port => 8080
		codec => "json"
	}
}

filter {
	# Remove unused logstash fields
	mutate {
		remove_field => [
			"headers"
		]
	}

	# Remove unused Windows event log fields
	mutate {
		remove_field => [
			"ContainerLog",
			"Keywords",
			"Level",
			"MatchedQueryIds",
			"Opcode",
			"ProviderId",
			"Qualifiers",
			"Task",
			"ThreadId"
		]
	}

	# Standardize field names
	mutate {
		rename => {
			"ActivityId" => "activity_id"
			"Id" => "event_id"
			"KeywordsDisplayNames" => "keywords"
			"LevelDisplayName" => "level_name"
			"LogName" => "log_name"
			"MachineName" => "hostname"
			"Message" => "event_body"
			"OpcodeDisplayName" => "opcode_name"
			"ProcessId" => "process_id"
			"Properties" => "event_properties"
			"ProviderName" => "provider_name"
			"RecordId" => "record_id"
			"RelatedActivityId" => "activity_id"
			"TaskDisplayName" => "task_name"
			"TimeCreated" => "event_time"
			"UserId" => "event_user"
			"Version" => "event_version"
		}
	}

	# Ensure fields are correct type otherwise conditionals fail
	mutate {
		convert => {
			"event_id" => "string"
		}
	}

	# Coerce event_time to date
	mutate {
		gsub => [
			"event_time", "/Date\(", "",
			"event_time", "\)/", ""
		]
	}

	date {
		match => ["event_time", "UNIX_MS"]
		remove_field => ["event_time"]
	}

	# TODO: use a translate instead (provider_name => service.type)
	if [provider_name] == "RemoteAccess" {
		mutate {
			add_field => {
				"[service][type]" => "vpn"
			}
		}
	}

	# Parse remote access logs
	if [event_id] == "20250" {
		mutate {
			add_field => {
				"correlation_id" => "%{[event_properties][1][Value]}"
				"vpn_client_hostname" => "%{[event_properties][2][Value]}"
				"vpn_client_port" => "%{[event_properties][3][Value]}"
			}
		}
	}

	if [event_id] == "20272" {
		mutate {
			add_field => {
				"correlation_id" => "%{[event_properties][1][Value]}"
				"vpn_client_hostname" => "%{[event_properties][2][Value]}"
				"vpn_client_port" => "%{[event_properties][3][Value]}"
				"vpn_session_start" => "%{[event_properties][4][Value]} %{[event_properties][5][Value]}"
				"vpn_session_end" => "%{[event_properties][6][Value]} %{[event_properties][7][Value]}"
				"vpn_session_minutes" => "%{[event_properties][8][Value]}"
				"vpn_session_seconds" => "%{[event_properties][9][Value]}"
				"vpn_bytes_sent" => "%{[event_properties][10][Value]}"
				"vpn_bytes_received" => "%{[event_properties][11][Value]}"
				"vpn_session_end_reason" => "%{[event_properties][12][Value]}"
				"vpn_tunnel_interface" => "%{[event_properties][13][Value]}"
				"vpn_quarantine_state" => "%{[event_properties][14][Value]}"
			}
		}

		date {
			match => ["vpn_session_start", "M/d/yyyy H:mm a"]
			target => "vpn_session_start"
		}

		date {
			match => ["vpn_session_end", "M/d/yyyy H:mm a"]
			target => "vpn_session_end"
		}
	}

	if [event_id] == "20274" {
		mutate {
			add_field => {
				"correlation_id" => "%{[event_properties][1][Value]}"
				"vpn_client_hostname" => "%{[event_properties][2][Value]}"
				"vpn_client_port" => "%{[event_properties][3][Value]}"
				"vpn_client_ip" => "%{[event_properties][4][Value]}"
			}
		}
	}

	if [event_id] == "20275" {
		mutate {
			add_field => {
				"correlation_id" => "%{[event_properties][1][Value]}"
				"vpn_client_ip" => "%{[event_properties][2][Value]}"
			}
		}
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "password"
		index => "windows-%{+YYYY.MM.dd}"
		manage_template => false
	}

	stdout {}
}
